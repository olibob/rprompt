#!/usr/bin/env ruby
#encoding: utf-8

require 'yaml'
require 'rprompt'
require 'pp'

configFile = "#{File.expand_path('~')}/.rprompt/config.yml"
begin
	config = YAML.load_file configFile
rescue => err
	puts err.message
	puts "Please run 'rPrompt config' to create the initial configuration.\n> " #TODO
	exit
end

if config.class == Hash
stdPrompt = config[:stdprompt] if config.has_key?(:stdprompt)
gitConfig = config[:git] if config.has_key?(:git)
gitLayout = gitConfig[:layout] if gitConfig
rvmConfig = config[:rvm] if config.has_key?(:rvm)
rvmLayout = rvmConfig[:layout] if rvmConfig
else
	puts "rprompt config seems to be empty?"
	print '\u@\h $'
	exit 1
end

dir = Dir.pwd
gitRepo = false

while dir != '/' do
    if File.exists?("#{dir}/.git")
    	gitRepo = true
    	break
    end
    dir = File.expand_path('..', dir)
end

if gitRepo && gitConfig && gitLayout
	if gitConfig[:status]
		status =  Rprompt::GitNumbers.new(gitConfig[:status].merge({:cmd => "git status -s"}))
	else
		status = Rprompt::GitNumbers.new({:cmd => "git status -s"})
	end

	if status.numberOfFiles == 0
		gitLayout.gsub!(/staged|modified|untracked|unmerged/, '')
		gitLayout.gsub!(/status/, "âœ”".send(:green)) if gitLayout.include?("status")
	else
		if gitConfig[:staged]
			staged    = Rprompt::GitNumbers.new(gitConfig[:staged].merge({:cmd => "git diff --staged --name-status"}))
			gitLayout.gsub!(/staged/, staged.show) if gitLayout.include?("staged")
		else
			gitLayout.gsub!(/staged/, '')
		end

		if gitConfig[:modified]
			modified  = Rprompt::GitNumbers.new(gitConfig[:modified].merge({:cmd => "git diff --name-status"}))
			gitLayout.gsub!(/modified/, modified.show) if gitLayout.include?("modified")
		else
			gitLayout.gsub!(/modified/, '')
		end

		if gitConfig[:untracked]
			untracked = Rprompt::GitNumbers.new(gitConfig[:untracked].merge({:cmd => "git ls-files --other --exclude-standard"}))
			gitLayout.gsub!(/untracked/, untracked.show) if gitLayout.include?("untracked")
		else
			gitLayout.gsub!(/untracked/, '')
		end

		if gitConfig[:unmerged]
			unmerged  = Rprompt::GitNumbers.new(gitConfig[:unmerged].merge({:cmd => "git diff --name-status --diff-filter=U"}))
			gitLayout.gsub!(/unmerged/, unmerged.show) if gitLayout.include?("unmerged")
		else
			gitLayout.gsub!(/unmerged/, '')
		end

		gitLayout.gsub!(/status/, "") if gitLayout.include?("status")
	end

	if gitConfig[:branch]
		branch    = Rprompt::GitBranch.new(gitConfig[:branch].merge({:cmd => "git symbolic-ref HEAD"}))
		gitLayout.gsub!(/branch/, branch.show) if gitLayout.include?("branch")
	else
		gitLayout.gsub!(/branch/, '')
	end

	if gitConfig[:ahead]
		ahead     = Rprompt::GitTrack.new(gitConfig[:ahead].merge({:cmd => "git branch -v"}), "ahead")
		gitLayout.gsub!(/ahead/, ahead.show) if gitLayout.include?("ahead")
	else
		gitLayout.gsub!(/ahead/, '')
	end

	if gitConfig[:behind]
		behind    = Rprompt::GitTrack.new(gitConfig[:behind].merge({:cmd => "git branch -v"}), "behind")
		gitLayout.gsub!(/behind/, behind.show) if gitLayout.include?("behind")
	else
		gitLayout.gsub!(/behind/, '')
	end
	if gitConfig[:sha]
		sha       = Rprompt::GitSha.new(gitConfig[:sha].merge({:cmd => "git rev-parse HEAD"}))
		gitLayout.gsub!(/sha/, sha.show) if gitLayout.include?("sha")
	else
		gitLayout.gsub!(/sha/, '')
	end
else
	gitLayout = ''
end

# RVM

if rvmConfig && rvmLayout
	if rvmConfig[:ruby]
		ruby = Rprompt::RvmRuby.new(rvmConfig[:ruby].merge({:cmd => "rvm-prompt"}))
		rvmLayout.gsub!(/ruby/, ruby.show) if rvmLayout.include?("ruby")
	else
		rvmLayout.gsub!(/ruby\s+/, '')
	end
	if rvmConfig[:gemset]
		gemset = Rprompt::RvmGemset.new(rvmConfig[:gemset].merge({:cmd => "rvm-prompt"}))
		rvmLayout.gsub!(/gemset/, gemset.show) if rvmLayout.include?("gemset")
	else
		rvmLayout.gsub!(/gemset/, '')
	end
end

prompt = "#{stdPrompt[:start]}#{gitLayout} #{rvmLayout}#{stdPrompt[:end]}"
print prompt