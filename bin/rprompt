#!/usr/bin/env ruby
#encoding: utf-8

require 'YAML'
require 'rprompt'

configFile = "#{File.expand_path('~')}/.rPrompt/config.yml"
begin
	config = YAML.load_file configFile
rescue => err
	puts err.message
	puts "Please run 'rPrompt config' to create the initial configuration.\n> " #TODO
	exit
end

stdPrompt = config[:stdprompt]
gitConfig = config[:git]
gitLayout = gitConfig[:layout]
colorConfig = config[:colors]
rvmConfig = config[:rvm]
rvmLayout = rvmConfig[:layout]

allColors = Rprompt::TerminalColors.new(colorConfig)

if File.exist?(".git")
	staged    = Rprompt::GitNumbers.new(gitConfig[:staged], allColors)
	modified  = Rprompt::GitNumbers.new(gitConfig[:modified], allColors)
	untracked = Rprompt::GitNumbers.new(gitConfig[:untracked], allColors)
	unmerged  = Rprompt::GitNumbers.new(gitConfig[:unmerged], allColors)
	branch    = Rprompt::GitBranch.new(gitConfig[:branch], allColors)
	ahead     = Rprompt::GitTrack.new(gitConfig[:ahead], allColors, "ahead")
	behind    = Rprompt::GitTrack.new(gitConfig[:behind], allColors, "behind")
	sha       = Rprompt::GitSha.new(gitConfig[:sha], allColors)

	if staged.numberOfFiles == 0 && untracked.numberOfFiles == 0 && unmerged.numberOfFiles == 0 && modified.numberOfFiles == 0
		gitLayout["staged"]    = ''
		gitLayout["modified"]  =''
		gitLayout["untracked"] = ''
		gitLayout["unmerged"]  = ''
		gitLayout["allgood"]   = "#{allColors.color(:Green)}âœ”#{allColors.color(:Reset)}"
	else
		gitLayout["allgood"]   = ''
		gitLayout["staged"]    = "#{staged.show}"
		gitLayout["modified"]  = "#{modified.show}"
		gitLayout["untracked"] = "#{untracked.show}"
		gitLayout["unmerged"]  = "#{unmerged.show}"
	end

	gitLayout["branch"] = "#{branch.show}"
	gitLayout["sha"]    = "#{sha.show}"
	gitLayout["ahead"]  = "#{ahead.show}"
	gitLayout["behind"] = "#{behind.show}"
else
	gitLayout = ''
end

# RVM

ruby = Rprompt::RvmRuby.new(rvmConfig[:ruby], allColors)
gemset = Rprompt::RvmGemset.new(rvmConfig[:gemset], allColors)

rvmLayout["ruby"] = ruby.show
rvmLayout["gemset"] = gemset.show

# # TODO:
# # - indicate if rails server is running (port 3000)
# # - layout needs a distinct start and finish enclosure to allow for spacing at both ends

prompt = "#{stdPrompt[:start]}#{gitLayout} #{rvmLayout}#{stdPrompt[:end]}"

print prompt