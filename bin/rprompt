#!/usr/bin/env ruby
#encoding: utf-8

require 'yaml'
require 'rprompt'

configFile = "#{File.expand_path('~')}/.rprompt/config.yml"
begin
	config = YAML.load_file configFile
rescue => err
	puts err.message
	puts "Please run 'rPrompt config' to create the initial configuration.\n> " #TODO
	exit
end

stdPrompt = config[:stdprompt] if config.has_key?(:stdprompt)
gitConfig = config[:git] if config.has_key?(:git)
gitLayout = gitConfig[:layout] if gitConfig
rvmConfig = config[:rvm] if config.has_key?(:rvm)
rvmLayout = rvmConfig[:layout] if rvmConfig

if File.exist?(".git") && gitConfig
	staged    = Rprompt::GitNumbers.new(gitConfig[:staged])
	modified  = Rprompt::GitNumbers.new(gitConfig[:modified])
	untracked = Rprompt::GitNumbers.new(gitConfig[:untracked])
	unmerged  = Rprompt::GitNumbers.new(gitConfig[:unmerged])
	branch    = Rprompt::GitBranch.new(gitConfig[:branch])
	ahead     = Rprompt::GitTrack.new(gitConfig[:ahead], "ahead")
	behind    = Rprompt::GitTrack.new(gitConfig[:behind], "behind")
	sha       = Rprompt::GitSha.new(gitConfig[:sha])

	if staged.numberOfFiles == 0 && untracked.numberOfFiles == 0 && unmerged.numberOfFiles == 0 && modified.numberOfFiles == 0
		gitLayout.gsub!(/staged|modified|untracked|unmerged/, '')
		gitLayout.gsub!(/allgood/, "âœ”".send(:green)) if gitLayout.include?("allgood")
	else
		gitLayout.gsub!(/allgood/, '') if gitLayout.include?("allgood")
		gitLayout.gsub!(/staged/, staged.show) if gitLayout.include?("staged")
		gitLayout.gsub!(/modified/, modified.show) if gitLayout.include?("modified")
		gitLayout.gsub!(/untracked/, untracked.show) if gitLayout.include?("untracked")
		gitLayout.gsub!(/unmerged/, unmerged.show) if gitLayout.include?("unmerged")
	end

	gitLayout.gsub!(/branch/, branch.show) if gitLayout.include?("branch")
	gitLayout.gsub!(/sha/, sha.show) if gitLayout.include?("sha")
	gitLayout.gsub!(/ahead/, ahead.show) if gitLayout.include?("ahead")
	gitLayout.gsub!(/behind/, behind.show) if gitLayout.include?("behind")
else
	gitLayout = ''
end

# RVM

if rvmConfig
	ruby = Rprompt::RvmRuby.new(rvmConfig[:ruby])
	gemset = Rprompt::RvmGemset.new(rvmConfig[:gemset])

	rvmLayout.gsub!(/ruby/, ruby.show) if rvmLayout.include?("ruby")
	rvmLayout.gsub!(/gemset/, gemset.show) if rvmLayout.include?("gemset")
end

prompt = "#{stdPrompt[:start]}#{gitLayout} #{rvmLayout}#{stdPrompt[:end]}"
print prompt